//// Закомментировать/раскомментировать строку в Visual Studio:
            //// Ctrl + K, Ctrl + /

            //// Задаем IP адрес разными способами

            //IPAddress localIp = new IPAddress(new byte[] { 127, 0, 0, 1 });
            //Log.Text = localIp.ToString();

            //IPAddress ipParse = IPAddress.Parse("127.0.0.1");
            //Log.Text = ipParse.ToString();

            //if (IPAddress.TryParse("127.0.0.1", out IPAddress? ipOut))
            //    Log.Text = ipOut?.ToString();

            //IPAddress ip = IPAddress.Parse("127.0.0.1");
            //IPEndPoint endpoint = new(ip, 8080);
            //Log.Text = endpoint.ToString();

            //// Если нужен IP адрес и порт

            //IPEndPoint endPoint1 = IPEndPoint.Parse("127.0.0.1:8080");
            //IPEndPoint.TryParse("127.0.0.1:8080", out IPEndPoint? endPoint2);
            //Log.Text = endPoint2.ToString();
            //Log.Text += "\nAddress: " + endPoint2.Address
            //    + " Port: " + endPoint2.Port
            //    + " Family: " + endPoint2.AddressFamily;


            ////Получение информации о сетевой конфигурации

            //var adapters = NetworkInterface.GetAllNetworkInterfaces();
            //Log.Text += $"\nОбнаружено {adapters.Length} устройств";
            //foreach (NetworkInterface adapter in adapters)
            //{
            //    Log.Text += "\n=====================================================================\n"
            //    + $"ID устройства: ------------- {adapter.Id}\n"
            //    + $"Имя устройства: ------------ {adapter.Name}\n"
            //    + $"Описание: ------------------ {adapter.Description}\n"
            //    + $"Тип интерфейса: ------------ {adapter.NetworkInterfaceType}\n"
            //    + $"Физический адрес: ---------- {adapter.GetPhysicalAddress()}\n"
            //    + $"Статус: -------------------- {adapter.OperationalStatus}\n"
            //    + $"Скорость: ------------------ {adapter.Speed}\n";

            //    IPInterfaceStatistics stats = adapter.GetIPStatistics();
            //    Log.Text += $"Получено: ----------------- {stats.BytesReceived}\n";
            //    Log.Text += $"Отправлено: --------------- {stats.BytesSent}\n";
            //}


            ////Работа с XML

            //XmlDocument xDoc = new XmlDocument();
            //xDoc.Load(@"Logs\27102023.xml");
            //// получим корневой элемент
            //XmlElement? xRoot = xDoc.DocumentElement;
            //if (xRoot != null)
            //{
            //    // обход всех узлов в корневом элементе
            //    foreach (XmlElement xnode in xRoot)
            //    {
            //        // получаем атрибут name
            //        //XmlNode? attr = xnode.Attributes.GetNamedItem("name");
            //        //Console.WriteLine(attr?.Value);

            //        // обходим все дочерние узлы элемента user
            //        foreach (XmlNode childnode in xnode.ChildNodes)
            //        {
            //            // если узел - name
            //            if (childnode.Name == "name")
            //            {
            //                Log.Text += $"\nУзел: {childnode.InnerText}";
            //            }
            //            // если узел - time
            //            if (childnode.Name == "time")
            //            {
            //                Log.Text += $"\nВремя: {childnode.InnerText}";
            //            }
            //            // если узел - message
            //            if (childnode.Name == "message")
            //            {
            //                Log.Text += $"\nСостояние: {childnode.InnerText}";
            //            }                        
            //        }
            //        Log.Text += "\n";
            //    }
            //}


            ////Изменение XML-документа

            //XmlDocument xDoc = new XmlDocument();
            //xDoc.Load(@"Logs\27102023.xml");
            //XmlElement? xRoot = xDoc.DocumentElement;

            //// создаем новый элемент device
            //XmlElement deviceElem = xDoc.CreateElement("device");

            //// создаем дочерниe элементы name, time, message
            //XmlElement nameElem = xDoc.CreateElement("name");
            //XmlElement timeElem = xDoc.CreateElement("time");
            //XmlElement messageElem = xDoc.CreateElement("message");

            ////// создаем текстовые значения для элементов и атрибута
            ////XmlText nameText = xDoc.CreateTextNode("Printer");
            ////XmlText timeText = xDoc.CreateTextNode("20:00");
            ////XmlText messageText = xDoc.CreateTextNode("Ink is over");

            ////добавляем узлы
            //nameElem.AppendChild(xDoc.CreateTextNode("Printer"));
            //timeElem.AppendChild(xDoc.CreateTextNode("20:00"));
            //messageElem.AppendChild(xDoc.CreateTextNode("Ink is over"));

            //// добавляем элементы name, time, message
            //deviceElem.AppendChild(nameElem);
            //deviceElem.AppendChild(timeElem);
            //deviceElem.AppendChild(messageElem);

            //// добавляем в корневой элемент новый элемент person
            //xRoot?.AppendChild(deviceElem);
            //xDoc.Save(@"Logs\27102023.xml");


            ////Язык запросов XPath

            //XmlDocument xDoc = new XmlDocument();
            //xDoc.Load(@"Logs\27102023.xml");
            //XmlElement? xRoot = xDoc.DocumentElement;

            //// выбор всех дочерних узлов
            //XmlNodeList? nodes = xRoot?.SelectNodes("device");
            //if (nodes is not null)
            //{
            //    foreach (XmlNode node in nodes)
            //        Log.Text += node.OuterXml;
            //}


            ////Используем Linq с Xml

            //XDocument xdoc = new XDocument();

            //// создаем первый элемент
            //XElement server1 = new XElement("device");
            //// создаем атрибут
            //XAttribute server1Attribute = new XAttribute("name", "Server");
            //// создаем два дочерних элемента
            //XElement server1TimeElement = new XElement("time", "21:00");
            //XElement server1MessageElement = new XElement("message", "Down");
            //// добавляем атрибут и элементы в первый элемент
            //server1.Add(server1Attribute);
            //server1.Add(server1TimeElement);
            //server1.Add(server1MessageElement);


            //// создаем второй элемент
            //XElement server2 = new XElement("device");
            //// создаем атрибут
            //XAttribute server2Attribute = new XAttribute("name", "Server");
            //// создаем два дочерних элемента
            //XElement server2TimeElement = new XElement("time", "22:00");
            //XElement server2MessageElement = new XElement("message", "UP");
            //// добавляем атрибут и элементы во второй элемент
            //server2.Add(server2Attribute);
            //server2.Add(server2TimeElement);
            //server2.Add(server2MessageElement);

            //// создаем корневой элемент
            //XElement device = new XElement("device");
            //// добавляем два элемента в корневой элемент
            //device.Add(server1);
            //device.Add(server2);
            //// добавляем корневой элемент в документ
            //xdoc.Add(device);
            ////сохраняем документ
            //xdoc.Save(@"Logs\27102023.xml");


            //// Упростим предыдущее

            //XDocument xdoc = new XDocument
            //(
            //    new XElement
            //    (
            //        "nodes",

            //        new XElement
            //        (
            //            "device",
            //            new XAttribute("name", "Server #1"),
            //            new XElement("time", "20:00"),
            //            new XElement("message", "Down")
            //        ),

            //        new XElement
            //        (
            //            "device",
            //            new XAttribute("name", "Server #2"),
            //            new XElement("time", "21:00"),
            //            new XElement("message", "Up")
            //        )
            //    )
            //);
            //xdoc.Save(@"Logs\27102023.xml");